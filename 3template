# Step 1: Import necessary libraries
import requests
import random
import time
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript
import urllib.parse
import base64
import datetime
import os
import json
from collections import deque
import uuid
import hashlib

# Step 2: Define templates and user management
class UserManager:
    USER_DB_FILE = "user_database.json"
    TEMPLATE_CODES = {
        "Food": "FOOD-1234",
        "Advertisement": "AD-5678",
        "Book": "BOOK-9012"
    }
    MASTER_CODE = "MASTER-CODE"

    def __init__(self):
        self.users = {}
        self.current_user = None
        self.load_users()
        
    def load_users(self):
        """Load user database from file"""
        if os.path.exists(self.USER_DB_FILE):
            try:
                with open(self.USER_DB_FILE, 'r') as f:
                    self.users = json.load(f)
            except:
                self.users = {}
    
    def save_users(self):
        """Save user database to file"""
        with open(self.USER_DB_FILE, 'w') as f:
            json.dump(self.users, f)
    
    def create_user(self, username, password, registration_code):
        """Create a new user account"""
        if username in self.users:
            return False, "Username already exists"
        
        # Validate registration code
        template = None
        for t, code in self.TEMPLATE_CODES.items():
            if registration_code == code:
                template = t
                break
                
        if not template and registration_code != self.MASTER_CODE:
            return False, "Invalid registration code"
        
        # Hash password
        salt = os.urandom(16)
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        
        # Store user (FIXED THE QUOTE HERE)
        self.users[username] = {
            "password": hashed_pw.hex(),  # Fixed the mismatched quote
            "salt": salt.hex(),
            "template": template,
            "is_master": (registration_code == self.MASTER_CODE),
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.save_users()
        return True, "Account created successfully"
    
    def authenticate(self, username, password):
        """Authenticate a user"""
        if username not in self.users:
            return False, "User not found"
        
        user = self.users[username]
        salt = bytes.fromhex(user['salt'])
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        
        if hashed_pw.hex() != user['password']:
            return False, "Invalid password"
        
        self.current_user = {
            "username": username,
            "template": user['template'],
            "is_master": user['is_master']
        }
        return True, "Login successful"

class TemplateManager:
    HISTORY_FILE = "social_media_history.json"
    MAX_HISTORY = 3  # Keep only last 3 runs per user

    def __init__(self):
        # Define industry-specific templates
        self.templates = {
            "Food": {
                "fields": [
                    {"name": "recipe_name", "description": "Recipe Name:", "type": "text"},
                    {"name": "cuisine_type", "description": "Cuisine Type:", "type": "text"},
                    {"name": "cooking_time", "description": "Cooking Time:", "type": "text"},
                    {"name": "key_ingredients", "description": "Key Ingredients:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["friendly", "exciting", "comforting"]}
                ],
                "prompt": self.food_prompt
            },
            "Advertisement": {
                "fields": [
                    {"name": "product_name", "description": "Product Name:", "type": "text"},
                    {"name": "product_type", "description": "Product Type:", "type": "text"},
                    {"name": "key_features", "description": "Key Features:", "type": "text"},
                    {"name": "target_audience", "description": "Target Audience:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["professional", "trendy", "luxurious"]}
                ],
                "prompt": self.ad_prompt
            },
            "Book": {
                "fields": [
                    {"name": "book_title", "description": "Book Title:", "type": "text"},
                    {"name": "author_name", "description": "Author Name:", "type": "text"},
                    {"name": "genre", "description": "Genre:", "type": "text"},
                    {"name": "key_themes", "description": "Key Themes:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["mysterious", "inspirational", "dramatic"]}
                ],
                "prompt": self.book_prompt
            }
        }
        self.regeneration_count = 0
        self.max_regenerations = 20
        self.history = {}
        self.load_history()

    def load_history(self):
        """Load history from file if exists"""
        if os.path.exists(self.HISTORY_FILE):
            try:
                with open(self.HISTORY_FILE, 'r') as f:
                    self.history = json.load(f)
            except:
                self.history = {}

    def save_history(self):
        """Save history to file"""
        with open(self.HISTORY_FILE, 'w') as f:
            json.dump(self.history, f)

    def record_session(self, username, session_data):
        """Record a session to user's history"""
        if username not in self.history:
            self.history[username] = deque(maxlen=self.MAX_HISTORY)
        
        # Convert images to base64 for storage
        session_data['images'] = [
            base64.b64encode(img).decode('utf-8') if img else None
            for img in session_data['images']
        ]
        self.history[username].append(session_data)
        self.save_history()
        
    def get_user_history(self, username):
        """Get history for a specific user"""
        return self.history.get(username, deque(maxlen=self.MAX_HISTORY))
        
    # Template-specific prompt generators
    def food_prompt(self, field_values, color_scheme):
        caption = (
            f"üç¥ Discover our delicious {field_values['recipe_name']} recipe! "
            f"Perfect for {field_values['cuisine_type']} cuisine lovers. "
            f"Ready in just {field_values['cooking_time']} with {field_values['key_ingredients']}. "
            f"#{field_values['cuisine_type'].replace(' ', '')} #Foodie"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 image of {field_values['recipe_name']}, "
            f"{field_values['cuisine_type']} cuisine, featuring {field_values['key_ingredients']}, "
            f"in a {field_values['tone']} atmosphere with {color_scheme} color palette, "
            f"professional food photography style, shallow depth of field."
        )
        return caption, image_prompt

    def ad_prompt(self, field_values, color_scheme):
        caption = (
            f"‚ú® Introducing our new {field_values['product_name']} {field_values['product_type']}! "
            f"Perfect for {field_values['target_audience']}. Features: {field_values['key_features']}. "
            f"Experience the difference today. #{field_values['product_type'].replace(' ', '')} #NewProduct"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 advertisement image of {field_values['product_name']} "
            f"({field_values['product_type']}) being used by {field_values['target_audience']}, "
            f"highlighting {field_values['key_features']}, {field_values['tone']} atmosphere, "
            f"{color_scheme} color palette, professional product photography."
        )
        return caption, image_prompt

    def book_prompt(self, field_values, color_scheme):
        caption = (
            f"üìö New Release: {field_values['book_title']} by {field_values['author_name']}! "
            f"A {field_values['genre']} novel exploring {field_values['key_themes']}. "
            f"Available now at major retailers. #{field_values['genre'].replace(' ', '')} #BookLover"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 book cover for '{field_values['book_title']}' by {field_values['author_name']}, "
            f"{field_values['genre']} genre, themes: {field_values['key_themes']}, "
            f"{field_values['tone']} atmosphere, {color_scheme} color palette, "
            f"professional book cover design with title and author name clearly visible."
        )
        return caption, image_prompt

# Step 3: Create manager instances
user_manager = UserManager()
template_manager = TemplateManager()

# Step 4: Create authentication UI components
form_style = {'description_width': '150px'}
input_width = '90%'

class AuthSystem:
    def __init__(self):
        self.create_widgets()
        
    def create_widgets(self):
        # Sign Up Widgets
        self.signup_username = widgets.Text(
            description="Username:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.signup_password = widgets.Password(
            description="Password:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.signup_code = widgets.Password(
            description="Registration Code:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.signup_btn = widgets.Button(
            description="Create Account",
            button_style='primary',
            layout=widgets.Layout(width='200px')
        )
        self.signup_status = widgets.Output()
        
        # Login Widgets
        self.login_username = widgets.Text(
            description="Username:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.login_password = widgets.Password(
            description="Password:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.login_btn = widgets.Button(
            description="Login",
            button_style='primary',
            layout=widgets.Layout(width='200px')
        )
        self.login_status = widgets.Output()
        
        # Logout Widget
        self.logout_btn = widgets.Button(
            description="Logout",
            button_style='danger',
            layout=widgets.Layout(width='100px', margin='20px 0 0 auto')
        )
        
        # Attach handlers
        self.signup_btn.on_click(self.on_signup)
        self.login_btn.on_click(self.on_login)
        self.logout_btn.on_click(self.on_logout)
    
    def on_signup(self, btn):
        username = self.signup_username.value.strip()
        password = self.signup_password.value.strip()
        code = self.signup_code.value.strip()
        
        if not username or not password or not code:
            with self.signup_status:
                display(HTML("<div style='color:red;padding:10px'>All fields are required!</div>"))
            return
            
        success, message = user_manager.create_user(username, password, code)
        with self.signup_status:
            self.signup_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))
    
    def on_login(self, btn):
        username = self.login_username.value.strip()
        password = self.login_password.value.strip()
        
        if not username or not password:
            with self.login_status:
                display(HTML("<div style='color:red;padding:10px'>Username and password required!</div>"))
            return
            
        success, message = user_manager.authenticate(username, password)
        with self.login_status:
            self.login_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))
            
        if success:
            display_main_app()
    
    def on_logout(self, btn):
        user_manager.current_user = None
        display_auth_ui()
    
    def show_signup_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üìù Create Account</h2>"),
            widgets.HTML("<p>Enter your details to create a new account</p>"),
            self.signup_username,
            self.signup_password,
            self.signup_code,
            self.signup_btn,
            self.signup_status
        ])
    
    def show_login_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üîí Login</h2>"),
            widgets.HTML("<p>Enter your credentials to access your account</p>"),
            self.login_username,
            self.login_password,
            self.login_btn,
            self.login_status
        ])

# Create authentication system
auth_system = AuthSystem()

# Step 5: Create main application UI components
# Create dynamic form area
dynamic_form_output = widgets.Output()

# Create color scheme picker
color_scheme = widgets.ColorPicker(
    concise=False,
    value='#4682B4',  # Steel blue
    description="Color Scheme:",
    style=form_style
)

# Create template selection (only for master users)
template_dropdown = widgets.Dropdown(
    options=list(template_manager.templates.keys()),
    description="Industry Template:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

# Create output display areas
caption_output = widgets.Output()
prompt_output = widgets.Output()
image_output = widgets.Output()
status_output = widgets.Output()
feedback_output = widgets.Output()
history_output = widgets.Output()

# Create action buttons
generate_btn = widgets.Button(
    description="‚ú® Generate Content",
    button_style='success',
    icon='bolt',
    layout=widgets.Layout(width='250px', margin='20px 0 0 0')
)

# Create feedback buttons
like_this_btn = widgets.Button(
    description="üëç I like this",
    button_style='success',
    tooltip="Download first image",
    layout=widgets.Layout(width='150px')
)

like_that_btn = widgets.Button(
    description="üëç I like that",
    button_style='success',
    tooltip="Download second image",
    layout=widgets.Layout(width='150px')
)

both_bad_btn = widgets.Button(
    description="üëé Both bad",
    button_style='danger',
    tooltip="Regenerate new versions",
    layout=widgets.Layout(width='150px')
)

feedback_buttons = widgets.HBox(
    [like_this_btn, like_that_btn, both_bad_btn],
    layout=widgets.Layout(justify_content='center', margin='20px 0')
)

# Create tab navigation
tab_nav = widgets.ToggleButtons(
    options=['Content Generator', 'Past Records'],
    value='Content Generator',
    button_style='',
    tooltips=['Create new content', 'View history of generated images'],
    layout=widgets.Layout(width='100%', margin='0 0 20px 0')
)

# Step 6: Assemble UI components
content_generator_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üì± Industry-Specific Content Generator</h2>"),
    widgets.HTML(f"<div id='template-info' style='margin-bottom:15px'></div>"),
    dynamic_form_output,
    color_scheme,
    generate_btn,
    widgets.HTML("<h3 style='border-bottom:1px solid #eee; padding-bottom:10px; margin-top:20px'>Generated Content</h3>"),
    widgets.Accordion(children=[caption_output, prompt_output],
                     titles=('üìù Social Media Caption', 'üé® Image Prompt')),
    widgets.HTML("<h4 style='margin:25px 0 10px 0'>Generated Images</h4>"),
    status_output,
    image_output,
    feedback_output
], layout=widgets.Layout(padding='20px'))

past_records_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üìö Past Records</h2>"),
    widgets.HTML("<i>History of your last 3 image sets</i>"),
    history_output
], layout=widgets.Layout(padding='20px'))

# Create tab container
tab_container = widgets.VBox([content_generator_tab])

# Step 7: Create UI event handlers
def download_image(image_bytes, filename_prefix="image"):
    """Trigger image download from browser"""
    filename = f"{filename_prefix}_{int(time.time())}.png"
    b64 = base64.b64encode(image_bytes).decode()
    payload = f"data:image/png;base64,{b64}"
    js = f"""
    var a = document.createElement('a');
    a.href = '{payload}';
    a.download = '{filename}';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    """
    display(Javascript(js))

def generate_dynamic_form(template_name):
    """Generate form fields based on selected template"""
    dynamic_form_output.clear_output()
    if not template_name:
        return
        
    template = template_manager.templates[template_name]
    form_widgets = []
    
    for field in template['fields']:
        if field['type'] == 'text':
            widget = widgets.Text(
                description=field['description'],
                style=form_style,
                layout=widgets.Layout(width=input_width)
            )
        elif field['type'] == 'dropdown':
            widget = widgets.Dropdown(
                options=field['options'],
                description=field['description'],
                style=form_style,
                layout=widgets.Layout(width=input_width)
            )
        form_widgets.append(widget)
    
    with dynamic_form_output:
        display(widgets.VBox(form_widgets))
    
    # Store reference to widgets
    dynamic_form_output.field_widgets = {field['name']: widget for field, widget in zip(template['fields'], form_widgets)}
    
    # Update template info display
    display(HTML(
        f"<script>document.getElementById('template-info').innerHTML = "
        f"\"<i>Template: <b>{template_name}</b></i>\";</script>"
    ))

def generate_images():
    """Generate images based on selected template"""
    # Clear previous outputs
    caption_output.clear_output()
    prompt_output.clear_output()
    image_output.clear_output()
    feedback_output.clear_output()
    status_output.clear_output()

    # Determine template
    if user_manager.current_user['is_master']:
        template_name = template_dropdown.value
    else:
        template_name = user_manager.current_user['template']

    if not template_name:
        with status_output:
            display(HTML(
                "<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                "‚ö†Ô∏è Please select a template first!</div>"
            ))
        return

    # Check if form has been generated
    if not hasattr(dynamic_form_output, 'field_widgets'):
        with status_output:
            display(HTML(
                "<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                "‚ö†Ô∏è Please wait for form to load!</div>"
            ))
        return

    # Get field values
    field_values = {}
    for name, widget in dynamic_form_output.field_widgets.items():
        field_values[name] = widget.value
        if not field_values[name]:
            with status_output:
                display(HTML(
                    f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                    f"‚ö†Ô∏è Please fill in all fields! Missing: {name}</div>"
                ))
            return

    # Show status
    with status_output:
        display(HTML(
            "<div style='text-align:center; color:#666; padding:10px'>"
            "<i class='fa fa-spinner fa-spin'></i> Generating content and images may take 20-40 seconds..."
            "</div>"
        ))

    # Get color name
    color_name = {
        '#ff6347': 'warm reds',
        '#4682b4': 'cool blues',
        '#32cd32': 'fresh greens'
    }.get(color_scheme.value.lower(), f"custom ({color_scheme.value})")

    # Generate content
    with caption_output:
        display(HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px; font-family:Arial'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating content...</div>"
        ))

    caption_text, image_prompt = template_manager.templates[template_name]['prompt'](field_values, color_name)

    # Display caption
    with caption_output:
        caption_output.clear_output()
        display(HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px;"
            f"font-family:Arial; font-size:14px'>{caption_text}</div>"
        ))

    # Display prompt
    with prompt_output:
        display(HTML(
            f"<div style='background:#f5f7ff; padding:15px; border-radius:5px;"
            f"font-family:monospace; font-size:13px; white-space:pre-wrap'>{image_prompt}</div>"
        ))

    # Generate and display images
    with image_output:
        image_output.clear_output()
        display(HTML(
            f"<div style='text-align:center; margin:10px; color:#666'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating 2 unique image variations...</div>"
        ))

        # Generate 2 unique images
        image_widgets = []
        image_data = []  # Store image bytes for feedback

        for i in range(2):
            # Add some variation to each prompt
            variation_prompt = f"{image_prompt}, variation {i+1}, unique composition"

            # Generate image
            image_bytes, seed = get_pollinations_image(variation_prompt)
            image_data.append(image_bytes)

            if image_bytes is None:
                img_widget = widgets.HTML(
                    f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828; height:300px; display:flex; align-items:center; justify-content:center'>"
                    f"‚ùå Image failed to generate. Please try again.</div>"
                )
            else:
                # Create image widget
                img_widget = widgets.Image(
                    value=image_bytes,
                    format='png',
                    width=300,
                    height=300
                )

            caption = widgets.HTML(
                f"<div style='text-align:center; font-size:12px; margin-top:5px'>"
                f"Variation #{i+1}</div>"
            )
            image_widgets.append(widgets.VBox([img_widget, caption]))

        # Create grid layout
        grid = widgets.GridBox(
            image_widgets,
            layout=widgets.Layout(
                grid_template_columns='repeat(2, 320px)',
                grid_gap='20px',
                justify_content='center'
            )
        )

        with image_output:
            image_output.clear_output()
            display(grid)

        # Show feedback buttons
        with feedback_output:
            feedback_output.clear_output()
            display(feedback_buttons)

            # Store image data for feedback handlers
            feedback_output.image_data = image_data
            feedback_output.template_name = template_name
            feedback_output.session_data = {
                "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "template": template_name,
                "field_values": field_values,
                "images": image_data
            }

        # Save this session to history
        username = user_manager.current_user['username']
        template_manager.record_session(username, feedback_output.session_data)

def on_generate_clicked(btn):
    generate_btn.disabled = True
    try:
        generate_images()
    except Exception as e:
        with status_output:
            display(HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))
    finally:
        generate_btn.disabled = False

def on_like_this_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[0]:
        download_image(feedback_output.image_data[0], f"{feedback_output.template_name}_1")
        with feedback_output:
            display(HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ First image downloaded!</div>"
            ))

def on_like_that_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[1]:
        download_image(feedback_output.image_data[1], f"{feedback_output.template_name}_2")
        with feedback_output:
            display(HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ Second image downloaded!</div>"
            ))

def on_both_bad_clicked(btn):
    if template_manager.regeneration_count >= template_manager.max_regenerations:
        with feedback_output:
            display(HTML(
                "<div style='background:#fff8e1; padding:10px; border-radius:5px; color:#f57f17; text-align:center'>"
                "‚ö†Ô∏è Maximum regenerations reached (20 attempts). Please start a new session.</div>"
            ))
        return

    template_manager.regeneration_count += 1
    with feedback_output:
        display(HTML(
            f"<div style='text-align:center; color:#666; padding:10px'>"
            f"<i class='fa fa-spinner fa-spin'></i> Regenerating images... "
            f"(Attempt {template_manager.regeneration_count}/{template_manager.max_regenerations})</div>"
        ))

    try:
        generate_images()
    except Exception as e:
        with feedback_output:
            display(HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))

def display_history():
    """Display the history of generated images for current user"""
    history_output.clear_output()
    with history_output:
        if not user_manager.current_user:
            display(HTML(
                "<div style='text-align:center; padding:40px; color:#666; font-style:italic'>"
                "Please login to view history</div>"
            ))
            return
            
        username = user_manager.current_user['username']
        user_history = template_manager.get_user_history(username)
        
        if not user_history:
            display(HTML(
                "<div style='text-align:center; padding:40px; color:#666; font-style:italic'>"
                "No history found. Generate some images first!</div>"
            ))
            return

        display(HTML("<div style='history-container'>"))
        for i, session in enumerate(user_history):
            # Convert base64 strings back to bytes for display
            images = []
            for img_base64 in session['images']:
                if img_base64:
                    images.append(base64.b64decode(img_base64))
                else:
                    images.append(None)

            display(HTML(
                f"<div class='history-card'>"
                f"<h3 style='border-bottom:1px solid #eee; padding-bottom:10px'>"
                f"Session {len(user_history)-i} - {session['template']}</h3>"
                f"<p><b>Date:</b> {session['timestamp']}</p>"
            ))
            
            # Display field values
            if 'field_values' in session:
                display(HTML("<p><b>Parameters:</b></p><ul>"))
                for key, value in session['field_values'].items():
                    display(HTML(f"<li><b>{key.replace('_', ' ').title()}:</b> {value}</li>"))
                display(HTML("</ul>"))

            # Display images
            images_row = []
            for j, img_bytes in enumerate(images):
                if img_bytes:
                    img_widget = widgets.Image(
                        value=img_bytes,
                        format='png',
                        width=200,
                        height=200
                    )
                    download_btn = widgets.Button(
                        description=f"Download Image {j+1}",
                        layout=widgets.Layout(width='150px', margin='10px 0')
                    )
                    download_btn.on_click(lambda btn, img=img_bytes, idx=j:
                        download_image(img, f"{session['template']}_{idx+1}"))
                    images_row.append(widgets.VBox(
                        [img_widget, download_btn],
                        layout=widgets.Layout(align_items='center')
                    ))
            display(widgets.HBox(images_row, layout=widgets.Layout(justify_content='space-around')))
            display(HTML("</div><hr style='margin:20px 0'>"))
        display(HTML("</div>"))

def on_template_change(change):
    """Handle template change event (for master users)"""
    if change['new']:
        generate_dynamic_form(change['new'])

def on_tab_change(change):
    """Handle tab navigation"""
    if change['new'] == 'Past Records':
        tab_container.children = [past_records_tab]
        display_history()
    else:
        tab_container.children = [content_generator_tab]

def display_main_app():
    """Display the main application after login"""
    # Clear any existing output
    display(HTML("<div id='main-app-container'></div>"))
    
    # Show user info and logout button
    user_info = widgets.HBox([
        widgets.HTML(
            f"<div style='padding:10px; background:#e3f2fd; border-radius:5px; margin-bottom:10px'>"
            f"Logged in as: <b>{user_manager.current_user['username']}</b> | "
            f"Template: <b>{user_manager.current_user['template'] or 'Master Access'}</b>"
            f"</div>"),
        auth_system.logout_btn
    ], layout=widgets.Layout(width='100%', justify_content='space-between'))
    
    display(user_info)
    
    # Show template dropdown only for master users
    if user_manager.current_user['is_master']:
        display(template_dropdown)
        if template_dropdown.value:
            generate_dynamic_form(template_dropdown.value)
    else:
        # Regular user - show their assigned template form
        generate_dynamic_form(user_manager.current_user['template'])
    
    display(tab_nav)
    display(tab_container)

def display_auth_ui():
    """Display authentication UI"""
    # Clear any existing output
    display(HTML("<div id='auth-ui-container'></div>"))
    
    # Show registration codes
    codes_html = "<div style='background:#e3f2fd; padding:15px; border-radius:5px; margin-bottom:20px'>"
    codes_html += "<b>Registration Codes:</b><br>"
    for template, code in UserManager.TEMPLATE_CODES.items():
        codes_html += f"<b>{template}</b>: {code}<br>"
    codes_html += f"<b>Master Code</b>: {UserManager.MASTER_CODE}<br>"
    codes_html += "<small>Provide the appropriate code during signup based on your template assignment</small></div>"
    
    display(HTML(codes_html))
    
    # Create tabs for signup and login
    auth_tabs = widgets.Tab()
    auth_tabs.children = [auth_system.show_signup_form(), auth_system.show_login_form()]
    auth_tabs.titles = ['Sign Up', 'Login']
    display(auth_tabs)

# Attach event handlers
generate_btn.on_click(on_generate_clicked)
like_this_btn.on_click(on_like_this_clicked)
like_that_btn.on_click(on_like_that_clicked)
both_bad_btn.on_click(on_both_bad_clicked)
tab_nav.observe(on_tab_change, names='value')
template_dropdown.observe(on_template_change, names='value')

# Step 8: Display the UI
if user_manager.current_user:
    display_main_app()
else:
    display_auth_ui()

# Step 9: Image generation function
def get_pollinations_image(image_prompt, seed=None):
    try:
        if seed is None:
            seed = random.randint(0, 1000000)

        # Encode the prompt for URL
        encoded_prompt = urllib.parse.quote(image_prompt)

        # Use the direct image generation URL
        gen_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width=512&height=512"

        # Get the image
        response = requests.get(gen_url, timeout=60)
        response.raise_for_status()

        # Return image bytes and seed
        return response.content, seed
    except Exception as e:
        return None, f"Error generating image: {str(e)}"„ÄÅ

take this code as a reference and just simply extract the code used for generating image. include the generating process of using pollination ai
