import ipywidgets as widgets
from IPython.display import display, HTML, Image, clear_output
import json
import os
import hashlib
import datetime
import requests
import random
import urllib.parse
import time

# User management class with role support (unchanged)
class UserManager:
    USER_DB_FILE = "user_database.json"
    MASTER_USERNAME = "master123"
    DEFAULT_MASTER_PASSWORD = "master@123"  # Default password for master user

    def __init__(self):
        self.users = {}
        self.current_user = None
        self.current_role = None
        self.load_users()
        self.create_master_user()  # Ensure master user exists

    def load_users(self):
        """Load user database from file"""
        if os.path.exists(self.USER_DB_FILE):
            try:
                with open(self.USER_DB_FILE, 'r') as f:
                    self.users = json.load(f)
            except:
                self.users = {}

    def save_users(self):
        """Save user database to file"""
        with open(self.USER_DB_FILE, 'w') as f:
            json.dump(self.users, f)

    def create_master_user(self):
        """Create master user if not exists"""
        if self.MASTER_USERNAME not in self.users:
            salt = os.urandom(16)
            hashed_pw = hashlib.pbkdf2_hmac(
                'sha256',
                self.DEFAULT_MASTER_PASSWORD.encode(),
                salt,
                100000
            )
            self.users[self.MASTER_USERNAME] = {
                "password": hashed_pw.hex(),
                "salt": salt.hex(),
                "industry_code": "ADMIN-001",
                "role": "master",
                "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            self.save_users()

    def create_user(self, username, password, industry_code):
        """Create a new user account with role assignment"""
        if username in self.users:
            return False, "Username already exists"

        # Determine role (master only for predefined username)
        role = "master" if username == self.MASTER_USERNAME else "client"

        # Hash password
        salt = os.urandom(16)
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)

        # Store user with role
        self.users[username] = {
            "password": hashed_pw.hex(),
            "salt": salt.hex(),
            "industry_code": industry_code,
            "role": role,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.save_users()
        return True, f"Account created successfully. Role: {role}"

    def authenticate(self, username, password):
        """Authenticate a user and set role"""
        if username not in self.users:
            return False, "User not found"

        user = self.users[username]
        salt = bytes.fromhex(user['salt'])
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)

        if hashed_pw.hex() != user['password']:
            return False, "Invalid password"

        self.current_user = username
        self.current_role = user['role']  # Set authenticated user's role
        return True, f"Login successful. Role: {user['role']}"

# Image generation functions (unchanged)
def generate_two_images(subject, style="professional photography"):
    """
    Generates two image variations based on a subject name

    Args:
        subject: The main subject (e.g., "Spicy Tuna Roll", "Mystery Novel", "Smart Watch")
        style: Optional style description (e.g., "Japanese cuisine", "book cover", "product shot")

    Returns:
        list: Two image bytes objects (or None if generation failed)
    """
    # Create base prompt
    base_prompt = f"A photorealistic 1024x1024 image of {subject}, {style}, high quality, 8k"

    images = []

    # Generate two variations
    for i in range(2):
        # Add variation to prompt
        variation_prompt = f"{base_prompt}, variation {i+1}, unique composition"

        # Generate image
        img_bytes, _ = get_pollinations_image(variation_prompt)
        images.append(img_bytes)

        # Short delay between requests
        time.sleep(1)

    return images

def get_pollinations_image(prompt, width=1024, height=1024):
    """
    Generate image using Pollinations AI API

    Args:
        prompt: Text description of the image
        width: Image width in pixels
        height: Image height in pixels

    Returns:
        tuple: (image_bytes, seed) or (None, error) on failure
    """
    try:
        # Generate random seed
        seed = random.randint(0, 1000000)

        # Encode prompt
        encoded_prompt = urllib.parse.quote(prompt)

        # Build API URL
        api_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width={width}&height={height}"

        # Get image
        response = requests.get(api_url, timeout=60)
        response.raise_for_status()

        return response.content, seed

    except Exception as e:
        print(f"Image generation failed: {str(e)}")
        return None, str(e)

# Authentication and Image Generation UI
form_style = {'description_width': '150px'}
input_width = '90%'

class AuthImageSystem:
    def __init__(self):
        self.user_manager = UserManager()
        self.create_widgets()

    def create_widgets(self):
        # Sign Up Widgets
        self.signup_username = widgets.Text(
            description="Username:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.signup_password = widgets.Password(
            description="Password:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.industry_code = widgets.Text(
            description="Industry Code:",
            style=form_style,
            layout=widgets.Layout(width=input_width),
            placeholder="Enter your industry code (e.g., TECH-123)"
        )
        self.signup_btn = widgets.Button(
            description="Create Account",
            button_style='primary',
            layout=widgets.Layout(width='200px')
        )
        self.signup_status = widgets.Output()

        # Login Widgets
        self.login_username = widgets.Text(
            description="Username:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.login_password = widgets.Password(
            description="Password:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.login_btn = widgets.Button(
            description="Login",
            button_style='primary',
            layout=widgets.Layout(width='200px')
        )
        self.login_status = widgets.Output()

        # Image Generation Widgets
        self.image_subject = widgets.Text(
            description="Subject:",
            style=form_style,
            layout=widgets.Layout(width=input_width),
            placeholder="e.g., Spicy Tuna Roll, Mystery Novel, Smart Watch"
        )
        self.image_style = widgets.Text(
            description="Style:",
            style=form_style,
            layout=widgets.Layout(width=input_width),
            value="professional photography",
            placeholder="e.g., Japanese cuisine, book cover, product shot"
        )
        self.generate_btn = widgets.Button(
            description="Generate Images",
            button_style='primary',
            layout=widgets.Layout(width='200px')
        )
        self.image_output = widgets.Output()

        # Attach handlers
        self.signup_btn.on_click(self.on_signup)
        self.login_btn.on_click(self.on_login)
        self.generate_btn.on_click(self.on_generate)

    def on_signup(self, btn):
        username = self.signup_username.value.strip()
        password = self.signup_password.value.strip()
        industry_code = self.industry_code.value.strip()

        if not username or not password:
            with self.signup_status:
                self.signup_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Username and password are required!</div>"))
            return

        if not industry_code:
            with self.signup_status:
                self.signup_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Industry code is required!</div>"))
            return

        success, message = self.user_manager.create_user(username, password, industry_code)
        with self.signup_status:
            self.signup_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))

    def on_login(self, btn):
        username = self.login_username.value.strip()
        password = self.login_password.value.strip()

        if not username or not password:
            with self.login_status:
                self.login_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Username and password required!</div>"))
            return

        success, message = self.user_manager.authenticate(username, password)
        with self.login_status:
            self.login_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))

        if success:
            # Clear the entire output and show success message
            clear_output(wait=True)
            display(HTML(f"<div style='color:green;padding:10px'>{message}</div>"))
            # Wait 3 seconds and transition to image generation UI
            time.sleep(3)
            clear_output(wait=True)
            display(self.show_image_gen_form())

    def on_generate(self, btn):
        subject = self.image_subject.value.strip()
        style = self.image_style.value.strip()

        if not subject:
            with self.image_output:
                self.image_output.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Subject is required!</div>"))
            return

        with self.image_output:
            self.image_output.clear_output()
            display(HTML("<div style='color:blue;padding:10px'>Generating images, please wait...</div>"))

        # Generate images
        images = generate_two_images(subject, style)

        # Display images
        with self.image_output:
            self.image_output.clear_output()
            if not any(images):
                display(HTML("<div style='color:red;padding:10px'>Failed to generate images.</div>"))
                return
            for i, img_bytes in enumerate(images):
                if img_bytes:
                    display(HTML(f"<h3>Image {i+1}</h3>"))
                    display(Image(img_bytes))
                    # Save image to file
                    with open(f"image_{i+1}.png", "wb") as f:
                        f.write(img_bytes)

    def show_signup_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>📝 Sign Up</h2>"),
            widgets.HTML("<p>Create a new account with your industry code</p>"),
            self.signup_username,
            self.signup_password,
            self.industry_code,
            widgets.HTML("<div style='font-size:12px; color:#666; margin-top:-10px'>"
                         "Enter your industry-specific code for future features</div>"),
            self.signup_btn,
            self.signup_status
        ])

    def show_login_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>🔒 Login</h2>"),
            widgets.HTML("<p>Access your existing account</p>"),
            self.login_username,
            self.login_password,
            self.login_btn,
            self.login_status
        ])

    def show_image_gen_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>🖼️ Image Generator</h2>"),
            widgets.HTML("<p>Enter a subject and style to generate two images</p>"),
            self.image_subject,
            self.image_style,
            self.generate_btn,
            self.image_output
        ])

    def show_auth_ui(self):
        """Display authentication UI with signup and login tabs"""
        auth_tabs = widgets.Tab()
        auth_tabs.children = [self.show_signup_form(), self.show_login_form()]
        auth_tabs.titles = ['Sign Up', 'Login']
        display(auth_tabs)

# Create instance and display UI
auth_image_system = AuthImageSystem()
auth_image_system.show_auth_ui()
