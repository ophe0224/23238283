import ipywidgets as widgets
from IPython.display import display, HTML, Image, clear_output
import json
import os
import hashlib
import datetime
import requests
import random
import urllib.parse
import time
import uuid
import base64

# User management class with role and template support
class UserManager:
    USER_DB_FILE = "user_database.json"
    TEMPLATE_DB_FILE = "templates.json"
    MASTER_USERNAME = "master123"
    DEFAULT_MASTER_PASSWORD = "master@123"

    def __init__(self):
        self.users = {}
        self.templates = {}
        self.current_user = None
        self.current_role = None
        self.load_users()
        self.load_templates()
        self.create_master_user()

    def load_users(self):
        """Load user database from file"""
        if os.path.exists(self.USER_DB_FILE):
            try:
                with open(self.USER_DB_FILE, 'r') as f:
                    self.users = json.load(f)
            except:
                self.users = {}

    def save_users(self):
        """Save user database to file"""
        with open(self.USER_DB_FILE, 'w') as f:
            json.dump(self.users, f)

    def load_templates(self):
        """Load template database from file"""
        if os.path.exists(self.TEMPLATE_DB_FILE):
            try:
                with open(self.TEMPLATE_DB_FILE, 'r') as f:
                    self.templates = json.load(f)
            except:
                self.templates = {}

    def save_templates(self):
        """Save template database to file"""
        with open(self.TEMPLATE_DB_FILE, 'w') as f:
            json.dump(self.templates, f)

    def create_master_user(self):
        """Create master user if not exists"""
        if self.MASTER_USERNAME not in self.users:
            salt = os.urandom(16)
            hashed_pw = hashlib.pbkdf2_hmac(
                'sha256',
                self.DEFAULT_MASTER_PASSWORD.encode(),
                salt,
                100000
            )
            self.users[self.MASTER_USERNAME] = {
                "password": hashed_pw.hex(),
                "salt": salt.hex(),
                "industry_code": "ADMIN-001",
                "role": "master",
                "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "template_id": None
            }
            self.save_users()

    def create_user(self, username, password, industry_code, template_id=None):
        """Create a new user account with role and optional template assignment"""
        if username in self.users:
            return False, "Username already exists"

        role = "master" if username == self.MASTER_USERNAME else "client"

        # Validate template_id if provided
        if template_id and template_id not in self.templates:
            return False, "Invalid template ID"

        # Hash password
        salt = os.urandom(16)
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)

        # Store user with template
        self.users[username] = {
            "password": hashed_pw.hex(),
            "salt": salt.hex(),
            "industry_code": industry_code,
            "role": role,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "template_id": template_id
        }
        self.save_users()
        return True, f"Account created successfully. Role: {role}"

    def authenticate(self, username, password):
        """Authenticate a user and set role"""
        if username not in self.users:
            return False, "User not found"

        user = self.users[username]
        salt = bytes.fromhex(user['salt'])
        hashed_pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)

        if hashed_pw.hex() != user['password']:
            return False, "Invalid password"

        self.current_user = username
        self.current_role = user['role']
        return True, f"Login successful. Role: {user['role']}"

    def logout(self):
        """Log out current user"""
        self.current_user = None
        self.current_role = None
        return "You have been logged out"

    def create_template(self, template_name, industry_code, content, creator):
        """Create a new template (master only)"""
        if creator != self.MASTER_USERNAME or self.current_role != "master":
            return False, "Only master users can create templates"

        template_id = str(uuid.uuid4())
        self.templates[template_id] = {
            "name": template_name,
            "industry_code": industry_code,
            "content": content,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.save_templates()
        return True, f"Template '{template_name}' created with ID: {template_id}"

    def delete_template(self, template_id, user):
        """Delete a template (master only)"""
        if user != self.MASTER_USERNAME or self.current_role != "master":
            return False, "Only master users can delete templates"

        if template_id not in self.templates:
            return False, "Template not found"

        # Prevent deletion if template is assigned to users
        for user_data in self.users.values():
            if user_data.get("template_id") == template_id:
                return False, "Template is assigned to users and cannot be deleted"

        del self.templates[template_id]
        self.save_templates()
        return True, f"Template {template_id} deleted successfully"

    def get_templates_by_industry(self, industry_code):
        """Get templates matching an industry code"""
        return {tid: t for tid, t in self.templates.items() if t['industry_code'] == industry_code}

# Image generation functions
def generate_two_images(subject, style="professional photography"):
    """
    Generates two image variations based on a subject name
    """
    base_prompt = f"A photorealistic 1024x1024 image of {subject}, {style}, high quality, 8k"
    images = []
    for i in range(2):
        variation_prompt = f"{base_prompt}, variation {i+1}, unique composition"
        img_bytes, _ = get_pollinations_image(variation_prompt)
        images.append(img_bytes)
        time.sleep(1)
    return images

def get_pollinations_image(prompt, width=1024, height=1024):
    """
    Generate image using Pollinations AI API
    """
    try:
        seed = random.randint(0, 1000000)
        encoded_prompt = urllib.parse.quote(prompt)
        api_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width={width}&height={height}"
        response = requests.get(api_url, timeout=60)
        response.raise_for_status()
        return response.content, seed
    except Exception as e:
        print(f"Image generation failed: {str(e)}")
        return None, str(e)

# Authentication and Image Generation UI with feedback system
form_style = {'description_width': '150px'}
input_width = '90%'

class AuthImageSystem:
    def __init__(self):
        self.user_manager = UserManager()
        self.create_widgets()
        # State for image feedback system
        self.current_images = []
        self.current_subject = ""
        self.current_style = ""
        self.regeneration_count = 0
        self.MAX_REGENERATIONS = 20

    def create_widgets(self):
        # Sign Up Widgets
        self.signup_username = widgets.Text(
            description="Username:", style=form_style, layout=widgets.Layout(width=input_width))
        self.signup_password = widgets.Password(
            description="Password:", style=form_style, layout=widgets.Layout(width=input_width))
        self.industry_code = widgets.Text(
            description="Industry Code:", style=form_style, layout=widgets.Layout(width=input_width),
            placeholder="Enter your industry code (e.g., TECH-123)")
        self.template_dropdown = widgets.Dropdown(
            description="Template:", style=form_style, layout=widgets.Layout(width=input_width),
            options=[("None", None)], disabled=True)
        self.signup_btn = widgets.Button(
            description="Create Account", button_style='primary', layout=widgets.Layout(width='200px'))
        self.signup_status = widgets.Output()

        # Login Widgets
        self.login_username = widgets.Text(
            description="Username:", style=form_style, layout=widgets.Layout(width=input_width))
        self.login_password = widgets.Password(
            description="Password:", style=form_style, layout=widgets.Layout(width=input_width))
        self.login_btn = widgets.Button(
            description="Login", button_style='primary', layout=widgets.Layout(width='200px'))
        self.login_status = widgets.Output()

        # Template Management Widgets
        self.template_name = widgets.Text(
            description="Template Name:", style=form_style, layout=widgets.Layout(width=input_width))
        self.template_industry_code = widgets.Text(
            description="Industry Code:", style=form_style, layout=widgets.Layout(width=input_width))
        self.template_content = widgets.Text(
            description="Content:", style=form_style, layout=widgets.Layout(width=input_width),
            placeholder="e.g., professional photography, Japanese cuisine")
        self.create_template_btn = widgets.Button(
            description="Create Template", button_style='primary', layout=widgets.Layout(width='200px'))
        self.delete_template_dropdown = widgets.Dropdown(
            description="Delete Template:", style=form_style, layout=widgets.Layout(width=input_width),
            options=[("Select a template", None)])
        self.delete_template_btn = widgets.Button(
            description="Delete Template", button_style='danger', layout=widgets.Layout(width='200px'))
        self.template_status = widgets.Output()

        # Image Generation Widgets
        self.image_subject = widgets.Text(
            description="Subject:", style=form_style, layout=widgets.Layout(width=input_width),
            placeholder="e.g., Spicy Tuna Roll, Mystery Novel, Smart Watch")
        self.image_style = widgets.Text(
            description="Style:", style=form_style, layout=widgets.Layout(width=input_width),
            value="professional photography")
        self.generate_btn = widgets.Button(
            description="Generate Images", button_style='primary', layout=widgets.Layout(width='200px'))
        self.image_output = widgets.Output()
        
        # Feedback Widgets
        self.like_this_btn = widgets.Button(
            description="I like this", 
            button_style='success',
            tooltip="Download first image",
            layout=widgets.Layout(width='120px')
        )
        self.like_that_btn = widgets.Button(
            description="I like that", 
            button_style='success',
            tooltip="Download second image",
            layout=widgets.Layout(width='120px')
        )
        self.both_bad_btn = widgets.Button(
            description="Both bad", 
            button_style='danger',
            tooltip="Regenerate new images",
            layout=widgets.Layout(width='120px')
        )
        self.feedback_status = widgets.Output()
        
        # Logout Widget
        self.logout_btn = widgets.Button(
            description="Logout", 
            button_style='warning', 
            icon='sign-out',
            layout=widgets.Layout(width='100px', margin='20px 0 0 auto')
        )

        # Attach handlers
        self.signup_btn.on_click(self.on_signup)
        self.login_btn.on_click(self.on_login)
        self.create_template_btn.on_click(self.on_create_template)
        self.delete_template_btn.on_click(self.on_delete_template)
        self.generate_btn.on_click(self.on_generate)
        self.logout_btn.on_click(self.on_logout)
        self.industry_code.observe(self.update_template_dropdown, names='value')
        self.like_this_btn.on_click(self.on_like_this)
        self.like_that_btn.on_click(self.on_like_that)
        self.both_bad_btn.on_click(self.on_both_bad)

    def update_template_dropdown(self, change):
        """Update template dropdown based on industry code"""
        industry_code = change['new'].strip()
        templates = self.user_manager.get_templates_by_industry(industry_code)
        options = [("None", None)] + [(t['name'], tid) for tid, t in templates.items()]
        self.template_dropdown.options = options
        self.template_dropdown.disabled = not bool(templates)

    def on_signup(self, btn):
        username = self.signup_username.value.strip()
        password = self.signup_password.value.strip()
        industry_code = self.industry_code.value.strip()
        template_id = self.template_dropdown.value

        if not username or not password:
            with self.signup_status:
                self.signup_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Username and password are required!</div>"))
            return

        if not industry_code:
            with self.signup_status:
                self.signup_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Industry code is required!</div>"))
            return

        success, message = self.user_manager.create_user(username, password, industry_code, template_id)
        with self.signup_status:
            self.signup_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))

    def on_login(self, btn):
        username = self.login_username.value.strip()
        password = self.login_password.value.strip()

        if not username or not password:
            with self.login_status:
                self.login_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Username and password required!</div>"))
            return

        success, message = self.user_manager.authenticate(username, password)
        with self.login_status:
            self.login_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))

        if success:
            clear_output(wait=True)
            display(HTML(f"<div style='color:green;padding:10px'>{message}</div>"))
            time.sleep(3)
            clear_output(wait=True)
            display(self.show_post_login_ui())

    def on_logout(self, btn):
        """Handle logout action"""
        message = self.user_manager.logout()
        clear_output(wait=True)
        display(HTML(f"<div style='color:blue;padding:10px'>{message}</div>"))
        time.sleep(2)
        clear_output(wait=True)
        self.show_auth_ui()

    def on_create_template(self, btn):
        if self.user_manager.current_role != "master":
            with self.template_status:
                self.template_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Only master users can create templates!</div>"))
            return

        template_name = self.template_name.value.strip()
        industry_code = self.template_industry_code.value.strip()
        content = self.template_content.value.strip()

        if not all([template_name, industry_code, content]):
            with self.template_status:
                self.template_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>All template fields are required!</div>"))
            return

        success, message = self.user_manager.create_template(
            template_name, industry_code, content, self.user_manager.current_user)
        with self.template_status:
            self.template_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))
        self.update_template_delete_dropdown()

    def on_delete_template(self, btn):
        if self.user_manager.current_role != "master":
            with self.template_status:
                self.template_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Only master users can delete templates!</div>"))
            return

        template_id = self.delete_template_dropdown.value
        if not template_id:
            with self.template_status:
                self.template_status.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Select a template to delete!</div>"))
            return

        success, message = self.user_manager.delete_template(template_id, self.user_manager.current_user)
        with self.template_status:
            self.template_status.clear_output()
            color = "green" if success else "red"
            display(HTML(f"<div style='color:{color};padding:10px'>{message}</div>"))
        self.update_template_delete_dropdown()

    def on_generate(self, btn):
        subject = self.image_subject.value.strip()
        style = self.image_style.value.strip()

        if not subject:
            with self.image_output:
                self.image_output.clear_output()
                display(HTML("<div style='color:red;padding:10px'>Subject is required!</div>"))
            return

        # Reset regeneration counter for new subject
        self.regeneration_count = 0
        self.current_subject = subject
        self.current_style = style
        
        with self.image_output:
            self.image_output.clear_output()
            display(HTML("<div style='color:blue;padding:10px'>Generating images, please wait...</div>"))
        
        self.generate_and_display_images()

    def generate_and_display_images(self):
        """Generate and display images with feedback options"""
        images = generate_two_images(self.current_subject, self.current_style)
        self.current_images = images  # Store for download
        
        with self.image_output:
            self.image_output.clear_output()
            
            if not any(images):
                display(HTML("<div style='color:red;padding:10px'>Failed to generate images.</div>"))
                return
                
            for i, img_bytes in enumerate(images):
                if img_bytes:
                    display(HTML(f"<h3>Image {i+1}</h3>"))
                    display(Image(img_bytes))
            
            # Display feedback buttons
            buttons_box = widgets.HBox([
                self.like_this_btn, 
                self.like_that_btn, 
                self.both_bad_btn
            ])
            display(buttons_box)
            
            # Show regeneration count if applicable
            if self.regeneration_count > 0:
                display(HTML(
                    f"<div style='color:blue;padding:10px'>"
                    f"Regeneration attempt: {self.regeneration_count}/{self.MAX_REGENERATIONS}"
                    f"</div>"
                ))

    def download_image(self, img_bytes, filename):
        """Create download link for an image"""
        b64 = base64.b64encode(img_bytes).decode()
        html = f'''
        <a download="{filename}" href="data:image/png;base64,{b64}" target="_blank">
            Click to download {filename}
        </a>
        '''
        return html

    def on_like_this(self, btn):
        """Handle 'I like this' button click - download first image"""
        if len(self.current_images) > 0 and self.current_images[0]:
            filename = f"{self.current_subject.replace(' ', '_')}_1.png"
            html = self.download_image(self.current_images[0], filename)
            with self.feedback_status:
                self.feedback_status.clear_output()
                display(HTML(f"<div style='color:green;padding:10px'>{html}</div>"))

    def on_like_that(self, btn):
        """Handle 'I like that' button click - download second image"""
        if len(self.current_images) > 1 and self.current_images[1]:
            filename = f"{self.current_subject.replace(' ', '_')}_2.png"
            html = self.download_image(self.current_images[1], filename)
            with self.feedback_status:
                self.feedback_status.clear_output()
                display(HTML(f"<div style='color:green;padding:10px'>{html}</div>"))

    def on_both_bad(self, btn):
        """Handle 'Both bad' button click - regenerate images"""
        self.regeneration_count += 1
        
        if self.regeneration_count >= self.MAX_REGENERATIONS:
            with self.image_output:
                self.image_output.clear_output()
                display(HTML(
                    "<div style='color:red;padding:10px'>"
                    "Maximum regenerations reached. Please try a different subject."
                    "</div>"
                ))
            return
            
        with self.image_output:
            self.image_output.clear_output()
            display(HTML(
                f"<div style='color:blue;padding:10px'>"
                f"Regenerating images (attempt {self.regeneration_count}/{self.MAX_REGENERATIONS})..."
                f"</div>"
            ))
        
        self.generate_and_display_images()

    def show_signup_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>📝 Sign Up</h2>"),
            widgets.HTML("<p>Create a new account with your industry code</p>"),
            self.signup_username,
            self.signup_password,
            self.industry_code,
            self.template_dropdown,
            widgets.HTML("<div style='font-size:12px; color:#666; margin-top:-10px'>"
                         "Enter your industry-specific code for future features</div>"),
            self.signup_btn,
            self.signup_status
        ])

    def show_login_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>🔒 Login</h2>"),
            widgets.HTML("<p>Access your existing account</p>"),
            self.login_username,
            self.login_password,
            self.login_btn,
            self.login_status
        ])

    def show_template_management_form(self):
        self.update_template_delete_dropdown()
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>🛠️ Template Management</h2>"),
            widgets.HTML("<p>Create or delete industry-specific templates (Master only)</p>"),
            self.template_name,
            self.template_industry_code,
            self.template_content,
            self.create_template_btn,
            self.delete_template_dropdown,
            self.delete_template_btn,
            self.template_status
        ])

    def show_image_gen_form(self):
        # Pre-populate style if user has an assigned template
        template_id = self.user_manager.users.get(self.user_manager.current_user, {}).get("template_id")
        if template_id and template_id in self.user_manager.templates:
            self.image_style.value = self.user_manager.templates[template_id]["content"]
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>🖼️ Image Generator</h2>"),
            widgets.HTML("<p>Enter a subject and style to generate two images</p>"),
            self.image_subject,
            self.image_style,
            self.generate_btn,
            self.image_output,
            self.feedback_status  # Added feedback status area
        ])

    def update_template_delete_dropdown(self):
        """Update the delete template dropdown with current templates"""
        options = [("Select a template", None)] + [
            (f"{t['name']} ({t['industry_code']})", tid) for tid, t in self.user_manager.templates.items()
        ]
        self.delete_template_dropdown.options = options

    def show_post_login_ui(self):
        """Show appropriate UI based on user role with logout button"""
        # Create header with logout button
        header = widgets.HBox([
            widgets.HTML(f"<h2 style='margin:0; flex-grow:1'>Logged in as: {self.user_manager.current_user} "
                         f"({self.user_manager.current_role})</h2>"),
            self.logout_btn
        ])
        
        if self.user_manager.current_role == "master":
            tabs = widgets.Tab()
            tabs.children = [self.show_image_gen_form(), self.show_template_management_form()]
            tabs.titles = ['Image Generator', 'Template Management']
            return widgets.VBox([header, tabs])
        else:
            return widgets.VBox([header, self.show_image_gen_form()])

    def show_auth_ui(self):
        """Display authentication UI with signup and login tabs"""
        auth_tabs = widgets.Tab()
        auth_tabs.children = [self.show_signup_form(), self.show_login_form()]
        auth_tabs.titles = ['Sign Up', 'Login']
        display(auth_tabs)

# Create instance and display UI
auth_image_system = AuthImageSystem()
auth_image_system.show_auth_ui()
